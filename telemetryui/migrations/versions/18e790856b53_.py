"""empty message

Revision ID: 18e790856b53
Revises: cb72058cf4e4
Create Date: 2018-07-20 02:51:24.952915

"""
# revision identifiers, used by Alembic.
revision = '18e790856b53'
down_revision = 'cb72058cf4e4'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()
    connection.execute("""
DROP VIEW IF EXISTS machine_ids_24h CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS top_builds CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS crashes CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS record_stream CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS population_external CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS population_internal CASCADE
    """)

    with op.batch_alter_table('records') as bop:
        bop.alter_column('record_format_version', new_column_name='record_version')
        bop.alter_column('payload_format_version', new_column_name='payload_version')
        bop.alter_column('tsp', new_column_name='timestamp_client', type_=sa.NUMERIC())
        bop.alter_column('tsp_server', new_column_name='timestamp_server', type_=sa.NUMERIC(), nullable=False,
                    server_default=sa.text("(date_part('epoch'::text, timezone('utc'::text, now())))::integer"))
        bop.alter_column('os_name', new_column_name='system_name', type_=sa.TEXT())
        bop.alter_column('machine', new_column_name='host_type')
        bop.alter_column('payload', type_=sa.TEXT(), nullable=False)
        bop.alter_column('bios_version', type_=sa.TEXT())
        bop.alter_column('board_name', type_=sa.TEXT())
        bop.alter_column('cpu_model', type_=sa.TEXT())
        bop.alter_column('event_id', type_=sa.TEXT())
    op.add_column('records', sa.Column('build', sa.TEXT(), nullable=False, server_default=''))
    op.add_column('records', sa.Column('classification', sa.TEXT(), nullable=False, server_default=''))
    op.drop_column('records', 'dupe_of')
    op.drop_column('records', 'icon')
    op.drop_column('records', 'buildstamp')
    op.drop_column('records', 'hide')
    op.drop_column('records', 'dupecount')
    op.drop_column('records', 'security')
    op.drop_column('records', 'dupemaster')

    connection.execute("""
UPDATE records SET build = build.build FROM build WHERE build.id = records.build_id
    """)

    connection.execute("""
UPDATE records SET classification = classification.classification FROM classification WHERE classification.id = records.classification_id
    """)

    connection.execute("""
UPDATE records SET payload = backtrace
    """)

    connection.execute("""
CREATE VIEW machine_ids_24h AS
(
 SELECT records.machine_id
   FROM records
  WHERE records.timestamp_server::double precision >= (date_part('epoch'::text, now()) - (24 * 3600)::double precision)
  GROUP BY records.machine_id
)
    """)

    connection.execute("""
CREATE VIEW top_builds AS
(
   SELECT a.build::numeric AS build_no
      FROM (SELECT DISTINCT(records.build) FROM records  WHERE records.build::numeric < 100000::numeric) a
ORDER BY (a.build::numeric) DESC
      LIMIT 10
)
    """)

    connection.execute("""
CREATE VIEW crashes AS
(
 SELECT g.function,
        count(g.function) AS count,
        r.build
   FROM records r,
        guilty g
  WHERE r.guilty_id = g.id
    AND (r.classification::text = ANY (ARRAY['org.clearlinux/crash/clr'::character varying::text, 'org.clearlinux/kernel/bug'::character varying::text, 'org.clearlinux/kernel/stackoverflow'::character varying::text, 'org.clearlinux/kernel/warning'::character varying::text]))
    AND r.build::numeric < 100000::numeric
    AND r.build::numeric >
                          (
                           SELECT top_builds.build_no
                             FROM top_builds
                           OFFSET 9
                            LIMIT 1
                          )
  GROUP BY g.function, r.build
)
    """)

    connection.execute("""
CREATE VIEW record_stream AS
(
SELECT to_timestamp(records.timestamp_server::double precision) AS to_timestamp,
    records.external,
        CASE
            WHEN records.external = true THEN 'external'::text
            ELSE 'internal'::text
        END AS source,
    records.machine_id,
    records.severity,
    records.classification,
    records.build
   FROM records
  ORDER BY records.id DESC
 LIMIT 1000
)
    """)

    connection.execute("""
CREATE VIEW population_external AS
(
 SELECT 1 AS value,
        c.build AS metric,
        c.time
   FROM (
          SELECT max(a.build) AS build,
                 max(a.timestamp_server) AS time
           FROM (
                  SELECT records.machine_id,
                         records.build,
                         records.timestamp_server AS timestamp_server
                    FROM records
                   WHERE records.timestamp_server::double precision >= (date_part('epoch'::text, now()) - (24 * 3600)::double precision)
                     AND records.external = true
                     AND records.build::numeric < 100000::numeric
                     AND records.build::numeric > 12000::numeric
                ) a
          GROUP BY a.machine_id
        ) c
)
    """)

    connection.execute("""
CREATE VIEW population_internal AS
(
 SELECT 1 AS value,
        c.build AS metric,
        c.time
   FROM (
          SELECT max(a.build) AS build,
                 max(a.timestamp_server) AS time
           FROM (
                  SELECT records.machine_id,
                         records.build,
                         records.timestamp_server AS timestamp_server
                    FROM records
                   WHERE records.timestamp_server::double precision >= (date_part('epoch'::text, now()) - (24 * 3600)::double precision)
                     AND records.external = false
                     AND records.build::numeric < 100000::numeric
                     AND records.build::numeric > 12000::numeric
                ) a
          GROUP BY a.machine_id
        ) c
)
    """)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()
    connection.execute("""
DROP VIEW IF EXISTS machine_ids_24h CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS top_builds CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS crashes CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS record_stream CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS population_external CASCADE
    """)

    connection.execute("""
DROP VIEW IF EXISTS population_internal CASCADE
    """)

    with op.batch_alter_table('records') as bop:
        bop.alter_column('record_version', new_column_name='record_format_version')
        bop.alter_column('payload_version', new_column_name='payload_format_version')
        bop.alter_column('timestamp_client', new_column_name='tsp', type_=sa.INTEGER())
        bop.alter_column('timestamp_server', new_column_name='tsp_server', type_=sa.INTEGER())
        bop.alter_column('system_name', new_column_name='os_name')
        bop.alter_column('host_type', new_column_name='machine')
        #bop.alter_column('payload', type_=sa.LargeBinary(), nullable=True)
    op.drop_column('records', 'classification')
    op.drop_column('records', 'build')
    op.add_column('records', sa.Column('dupemaster', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('security', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('dupecount', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('hide', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('buildstamp', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('icon', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=True))
    op.add_column('records', sa.Column('dupe_of', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))

    connection.execute("""
ALTER TABLE records ALTER COLUMN payload TYPE BYTEA USING convert_to(payload, 'LATIN1')
    """)

    connection.execute("""
CREATE VIEW machine_ids_24h AS
(
 SELECT records.machine_id
   FROM records
  WHERE records.tsp_server::double precision >= (date_part('epoch'::text, now()) - (24 * 3600)::double precision)
  GROUP BY records.machine_id
)
    """)

    connection.execute("""
CREATE VIEW top_builds AS
(
 SELECT build.id,
    build.build::numeric AS build_no
   FROM build
  WHERE build.build::numeric < 100000::numeric
  ORDER BY (build.build::numeric) DESC
 LIMIT 10
)
    """)

    connection.execute("""
CREATE VIEW crashes AS
(
 SELECT g.function,
    count(g.function) AS count,
    b.build
   FROM records,
    guilty g,
    build b,
    classification c
  WHERE records.guilty_id = g.id AND records.classification_id = c.id AND (c.classification::text = ANY (ARRAY['org.clearlinux/crash/clr'::character varying::text, 'org.clearlinux/kernel/bug'::character varying::text, 'org.clearlinux/kernel/stackoverflow'::character varying::text, 'org.clearlinux/kernel/warning'::character varying::text])) AND b.id = records.build_id AND b.build::numeric < 100000::numeric AND b.build::numeric > (( SELECT top_builds.build_no
           FROM top_builds
         OFFSET 9
         LIMIT 1))
  GROUP BY g.function, b.build
)
    """)

    connection.execute("""
CREATE VIEW record_stream AS
(
 SELECT to_timestamp(records.tsp_server::double precision) AS to_timestamp,
    records.external,
        CASE
            WHEN records.external = true THEN 'external'::text
            ELSE 'internal'::text
        END AS source,
    records.machine_id,
    records.severity,
    c.classification,
    b.build
   FROM records,
    classification c,
    build b
  WHERE c.id = records.classification_id AND b.id = records.build_id
  ORDER BY records.id DESC
 LIMIT 1000
)
    """)

    connection.execute("""
CREATE VIEW population_external AS
(
SELECT 1 AS value,
    b.build AS metric,
    c."time"
   FROM ( SELECT max(a.build_id) AS build_id,
            max(a.tsp_server) AS "time"
           FROM ( SELECT records.machine_id,
                    records.build_id,
                    records.tsp_server
                   FROM records
                  WHERE records.tsp_server::double precision >= (date_part('epoch'::text, now()) - (24 * 3600)::double precision) AND records.external = true) a
          GROUP BY a.machine_id) c,
    build b
  WHERE c.build_id = b.id AND b.build::numeric < 100000::numeric AND b.build::numeric > 12000::numeric
)
    """)

    connection.execute("""
CREATE VIEW population_internal AS
(
 SELECT 1 AS value,
    b.build AS metric,
    c."time"
   FROM ( SELECT max(a.build_id) AS build_id,
            max(a.tsp_server) AS "time"
           FROM ( SELECT records.machine_id,
                    records.build_id,
                    records.tsp_server
                   FROM records
                  WHERE records.tsp_server::double precision >= (date_part('epoch'::text, now()) - (24 * 3600)::double precision) AND records.external = false) a
          GROUP BY a.machine_id) c,
    build b
  WHERE c.build_id = b.id AND b.build::numeric < 100000::numeric AND b.build::numeric > 12000::numeric
)
    """)
    # ### end Alembic commands ###
